<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>PVM Assignment</title>
    <%= stylesheets('pvm') %>
    <%= scripts('jquery', 'jquery-ui', 'underscore', 'ace/ace', 'source-editor', 'revealer') %>

    
    <%= Html::Generation::Quiz.setup %>
    <style>
      #colours {
        margin-left: auto;
        margin-right: auto;
        width: 50%;
      }

      #colours td:first-child {
        color: #FFF;
        text-align: center;
      }

      #colours td {
        padding: 5px;
      }

      input {
        width: 100px;
      }

      input.correct {
        background: #AFA;
      }

      input.incorrect {
        background: #FAA
      }

      .solution {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
      }

      .message {
        font-size: 2em;
        font-weight: bold;
        text-align: center;
        width: 75%;
        margin: 100px auto;
        padding: 20px;
        background: #F44;
        box-shadow: 0px 0px 50px 30px #F44;
      }

      .git {
        border: 1px solid black;
        padding: 10px;
        width: 80%;
        margin: 10px auto;
        text-align: center;
        font-weight: bold;
      }

      .cake {
        border: 1px solid black;
        padding: 10px;
        width: 80%;
        margin: 10px auto;
        font-weight: bold;
        background: #FFAA77;
      }

      .cake .header {
        display: block;
        text-align: center;
        font-size: 2em;
        font-weight: bold;
      }

      .revealer {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin: 10px auto;      
        text-align: center;
        cursor: help;
      }

      .explanation {
        border: 1px solid black;
        padding: 10px;
        width: 75%;
        margin: 10px auto;
      }

      img.center {
        display: block;
        margin: 10px auto;
      }
    </style>
  </head>

  <body>
    <header>
      <div class="center-vertically">Fractals</div>
    </header>
    <div id="contents">
      <div class="message" title="You better be reading this!">
        New material, yada yada yada.
      </div>

      <p>
        All exercises are to be made within the same solution, which
        can be found here:
      </p>
      <%=
         module GitLink
           extend Contracts::TypeChecking
           extend GitMixin
         end

         GitLink.git_link 'fractals/fractals.sln'
       %>
       <p>
         The goal of this assignment is for you to find out
         how to accomplish these tasks. You are given a number
         of classes which you have to examine and try
         to determine how they work. It is important that you
         experiment and think logically.
       </p>
       <p>
         Producing the image below is your ultimate goal for this lab session.
       </p>
       <img class="center" src="ex12b-solution.png" />
       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap and write it to file as a BMP.
             </p>
             <img class="center" src="ex1-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap, fill it with red, and write it to file.
             </p>
             <p>
               Note that the <code>color</code> class uses <code>double</code>s for
               colour components which should range between <code>0</code> and <code>1</code>.
               For example, blue is encoded as <code>color(0, 0, 1)</code>.
             </p>
             <img class="center" src="ex2-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           extend SourceCodeMixin

           self.source = <<-END
             interval from(0, bitmap.width() - 1);
             interval to(0, 255);
             interval_mapper mapper(from, to);

             double mapped_left  = mapper[0]; // 0
             double mapped_right = mapper[bitmap.width() - 1]; // 255
             double mapped_middle = mapper[(bitmap.width() - 1) / 2]; // 127.5
           END
          
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <p>
               Make use of the provided classes <code>interval</code>
               and <code>interval_mapper</code>. Say you have
               an <code>x</code> that varies from left to right in your bitmap,
               in other words, it ranges from <code>0</code> to <code>bitmap.width() - 1</code>.
               Say you want to associate the left side (<code>x = 0</code>) with black (RGB(0,0,0))
               and the right side (<code>x = bitmap.width() - 1</code>) with
               white (RGB(255,255,255)). This means you need to somehow
               map the interval <code>[0, bitmap.width()-1]</code> to
               <code>[0, 255]</code>. You can do this using the <code>interval_mapper</code>
               as follows:
             </p>
             #{show_source_editor}
             
             <img class="center" src="ex3-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex4-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex5-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex6-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex7-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex8-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           extend SourceCodeMixin

           self.source = <<-END
             Bitmap bitmap(500, 500);

             projection proj(500,               // image width
                             500,               // image height
                             interval(0, 1),    // range for real part
                             interval(0, 1));   // range for imaginary part

             proj.project( position(0,0) );     // 0+0i
             proj.project( position(500,500) ); // 1+1i
             proj.project( position(250,0) );   // 0.5+0i
             proj.project( position(0,250) );   // 0+0.5i
             proj.project( position(250,250) ); // 0.5+0.5i             
           END

           <<-END
             <p>
               The <code>projection</code> class can be used
               to associate a complex number with each point of the bitmap.
               For example, you could associate 0+0i with the pixel with coordinates (0,0)
               and 1+1i with the pixel at <code>(bitmap.width()-1, bitmap.height()-1)</code>
               as follows:
             </p>
             #{show_source_editor}
             <p>
               Use <code>projection</code> to produce the image below.
               The bitmap's upper left corner corresponds to -0.5-0.5i,
               the opposite corner corresponds to 0.5+0.5i.
               In other words, the bitmap is mapped to
               a square with side 1 centered on 0+0i.
             </p>
             <p>
               For each pixel with coordinates (x, y), find the corresponding complex c = a+bi.
               The colour for the pixel is then <code>color( c.abs(), c.abs(), c.abs() )</code>.
             </p>   
             <img class="center" src="ex9-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Render the <a href="https://en.wikipedia.org/wiki/Mandelbrot_set">Mandelbrot fractal</a>.
             </p>
             <img class="center" src="ex10-solution.png" />
             <p>
               This probably requires some explanation. We first introduce the concept
               of infinite sequences. An infinite sequence can be seen
               as an array of numbers (e.g. <code>double[]</code>), but
               with no last element: it just goes on forever.
             </p>
             <p>
               An infinite sequence is said to converge if the items of the sequence
               grow forever closer to some "final value". For example,
               the sequence 1, 0.1, 0.01, 0.001, 0.0001, 0.00001, &hellip;
               is convergent as the values grow forever closer to 0.
             </p>
             <p>
               An infinite sequence is said to diverge if it does not converge.
               For example, in the sequence 1, 2, 3, 4, 5, &hellip;
               the values will forever grow larger.
             </p>
             <p>
               We can construct such an infinite sequence making use
               of a function and an initial value. For example, say we want to build
               an infinite sequence of <code>double</code>s, we
               can use a <code>double f(double x)</code>
               and an initial value <code>x</code> as follows:
             </p>
             <ul>
               <li>The infinite sequence's first element is <code>x</code>.</li>
               <li>The second element is <code>f(x)</code>.</li>
               <li>The third element is <code>f(f(x))</code>.</li>
               <li>The third element is <code>f(f(f(x)))</code>.</li>
               <li>&hellip;</li>
             </ul>
             <p>
               For example, take f(x) = x<sup>2</sup>. Below are a few infinite sequences,
               each with a different starting value:
             </p>
             <ul>
               <li>Starting at 0, we get 0, 0<sup>2</sup> = 0, 0, 0, 0, 0, &hellip;</li>
               <li>Starting at 0.5, we get 0.5, 0.5<sup>2</sup> = 0.25,
                 0.25<sup>2</sup> = 0.0625,
                 0.0625<sup>2</sup> = 0.00390625, 0.0000152587890625, 0.00000000023283064365386962890625, &hellip;</li>
               <li>Starting at 1, we get 1, 1<sup>2</sup> = 1, 1, 1, 1, 1, &hellip;</li>
               <li>Starting at 2, we get 2, 2<sup>2</sup> = 4, 4<sup>2</sup> = 16, 16<sup>2</sup>=256, 256<sup>2</sup> = 65536, 4294967296, &hellip;</li>
             </ul>
             <p>
               If we start at 0, 0.5 or 1, we get convergent infinite sequences. The infinite sequence starting at 2, however, diverges.
             </p>
             <p>
               Producing the above fractal is simple: each pixel corresponds to a complex <code>c</code> (as you did in the previous exercise).
               We take the function <code>f(z) = z * z + c</code> and build an infinite sequence with it starting with 0+0i. If it converges,
               colour the pixel black, otherwise, colour it white.
             </p>
             <p>
               How to detect if the sequence converges? There's no particularly nifty approach to this.
               The most straightforward way is to apply the function <code>f</code> a large number of times and see if <code>z</code>'s
               absolute value grows larger than a certain value.
             </p>
             <p>
               For example, consider c = 1+2i. We compute the sequence:
             </p>
             <ol>
               <li>We start at z = 0+0i.</li>
               <li>We compute <code>f(z) = z * z + c = (0+0i * 0+0i) + c = 1+2i</code>.</li>
               <li>We compute <code>f(f(z)) = f(1+2i) = -2+6i</code>.</li>
               <li>We compute <code>f(f(f(z))) = f(-2+6i) = -31-22i</code>.</li>
               <li>We compute <code>f(f(f(f(z)))) = f(-31-22i) = 478+1366i</code>.</li>
             </ol>
             <p>
               We see that the complex number grows larger at each step. We see this as an indication that the sequence diverges,
               se colour the pixel corresponding to 1+2i white. If we start at 0.1+0.1i, we get
             </p>
             <ol>
               <li>0 + 0i</li>
               <li>0.1 + 0.1i</li>
               <li>0.1 + 0.12i</li>
               <li>0.0956 + 0.124i</li>
               <li>0.0937634 + 0.123709i</li>
               <li>0.0934877 + 0.123199i</li>
               <li>0.093562 + 0.123035i</li>
               <li>0.0936162 + 0.123023i</li>
               <li>0.0936294 + 0.123034i</li>
               <li>&hellip;</li>
             </ol>
             <p>
               We see that the complex value remains small. We can decide that if <code>z</code> remains
               small after N steps (where you can choose N; try several values and compare results),
               the sequence probably converges. To measure <code>z</code>, use the absolute value.
               <code>z</code> remaining small means that its absolute value remains
               below a certain threshold value, which again you can choose yourself (try and compare).
             </p>
           END
         end
       %>
              
       <%=
         exercise do
           <<-END
             <p>
               In the previous exercise, we used just black (convergent) and white (divergent).
               In order to get a nicer picture, we can introduce intermediate colours by
               counting the number of iterations necessary before <code>z</code>'s absolute value
               exceeds a chosen threshold.
             </p>
             <p>
               Say, for example, that we want to distinguish 100 levels of shades.
               We can then start building the infinite sequence of <code>z</code>s,
               counting how many times we apply the function <code>f</code>
               and stopping when <code>z.abs()</code> becomes greater than some chosen
               maximum. If it took 0 iterations, we know it diverges immediately.
               If it took 10 iterations, <code>z</code> remained low for a short while
               but then "exploded" (on the 10th step), meaning it diverges quickly.
               Sometimes it will diverge very slowly, and only after 1000 steps
               will <code>z</code> exceed the threshold. Since we are only
               interested in 100 levels of shades, we can choose to stop after
               100 steps. If <code>z</code> hasn't exploded by then, we assume
               the sequence converges.
             </p>
             <img class="center" src="ex11-solution.png" />
           END
         end
       %>


       <%=
         exercise do
           <<-END
             <p>
               Introduce <a href="https://en.wikipedia.org/wiki/Supersampling">anti-aliasing</a>.
             </p>
             <img class="center" src="ex12a-solution.png" />
             <img class="center" src="ex12b-solution.png" />
           END
         end
       %>
              
    </div>
  </body>

  <script>
    Quiz.formatQuizzes();
    SourceEditor.initialize();
    Revealer.initialize();
  </script>
</html>
