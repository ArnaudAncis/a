<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>PVM Assignment</title>
    <%= default_externals %>
    <script src="<%= Settings::SHARED_URL %>/ace/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/source-editor.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/revealer.js" type="text/javascript" charset="utf-8"></script>
    
    <%= Html::Generation::Quiz.setup %>
    <style>
      #colours {
        margin-left: auto;
        margin-right: auto;
        width: 50%;
      }

      #colours td:first-child {
        color: #FFF;
        text-align: center;
      }

      #colours td {
        padding: 5px;
      }

      input {
        width: 100px;
      }

      input.correct {
        background: #AFA;
      }

      input.incorrect {
        background: #FAA
      }

      .solution {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
      }

      .message {
        font-size: 2em;
        font-weight: bold;
        text-align: center;
        width: 75%;
        margin: 100px auto;
        padding: 20px;
        background: #F44;
        box-shadow: 0px 0px 50px 30px #F44;
      }

      .git {
        border: 1px solid black;
        padding: 10px;
        width: 80%;
        margin: 10px auto;
        text-align: center;
        font-weight: bold;
      }

      .cake {
        border: 1px solid black;
        padding: 10px;
        width: 80%;
        margin: 10px auto;
        font-weight: bold;
        background: #FFAA77;
      }

      .cake .header {
        display: block;
        text-align: center;
        font-size: 2em;
        font-weight: bold;
      }

      .revealer {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin: 10px auto;      
        text-align: center;
        cursor: help;
      }

      .explanation {
        border: 1px solid black;
        padding: 10px;
        width: 75%;
        margin: 10px auto;
      }
    </style>
  </head>

  <body>
    <header>
      <div class="center-vertically">Classes</div>
    </header>
    <div id="contents">
      <div class="message" title="You better be reading this!">
        Update the contents of the local copy of the PVM repo!
        Use <code>git pull</code> to fetch the new material.
      </div>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "D"; }
                 Foo(const Foo&) { std::cout << "C"; }
                 Foo(Foo&&) { std::cout << "M"; }
                 ~Foo() { std::cout << "X"; }
             };

             int main()
             {
                 Foo f;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "D"; }
                 Foo(const Foo&) { std::cout << "C"; }
                 Foo(Foo&&) { std::cout << "M"; }
                 ~Foo() { std::cout << "X"; }
             };

             int main()
             {
                 Foo g;
                 Foo f = g;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "D"; }
                 Foo(const Foo&) { std::cout << "C"; }
                 Foo(Foo&&) { std::cout << "M"; }
                 ~Foo() { std::cout << "X"; }
             };

             int main()
             {
                 Foo* f;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "D"; }
                 Foo(const Foo&) { std::cout << "C"; }
                 Foo(Foo&&) { std::cout << "M"; }
                 ~Foo() { std::cout << "X"; }
             };

             int main()
             {
                 new Foo;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "D"; }
                 Foo(const Foo&) { std::cout << "C"; }
                 Foo(Foo&&) { std::cout << "M"; }
                 ~Foo() { std::cout << "X"; }
             };

             void bar(Foo foo)
             {

             }

             int main()
             {
                 Foo foo;
                 bar(foo);
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "D"; }
                 Foo(const Foo&) { std::cout << "C"; }
                 Foo(Foo&&) { std::cout << "M"; }
                 ~Foo() { std::cout << "X"; }
             };

             Foo bar(Foo foo)
             {
                 return foo;
             }

             int main()
             {
                 Foo foo;
                 bar(foo);
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             class Foo
             {
             public:
                 Foo() { std::cout << "FD"; }
                 Foo(const Foo&) { std::cout << "FC"; }
                 Foo(Foo&&) { std::cout << "FM"; }
                 ~Foo() { std::cout << "FX"; }
             };

             class Bar
             {
                 Foo foo;

             public:
                 Bar() { std::cout << "BD"; }
                 Bar(const Bar&) { std::cout << "BC"; }
                 Bar(Bar&&) { std::cout << "BM"; }
                 ~Bar() { std::cout << "BX"; }
             };

             class Qux
             {
                 Bar bar;

             public:
                 Qux() { std::cout << "QD"; }
                 Qux(const Qux&) { std::cout << "QC"; }
                 Qux(Qux&&) { std::cout << "QM"; }
                 ~Qux() { std::cout << "QX"; }

             };

             int main()
             {
                 Qux q;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end
      %>

      <%=
        exercise do
          extend GitMixin


          <<-END
            #{git_link 'complex/complex.sln'}
            <p>
              Write a class <code>complex</code> that
              represents <a href="https://en.wikipedia.org/wiki/Complex_number">complex numbers</a>.
            </p>
            <p>
              A quick explanation: let's first take a look at fractions.
              Fractions consist of two parts: a numerator A and a denominator B.
              The mathematical notation for this fraction is A/B.
            </p>
            <p>
              Similary, a complex number consists of two parts:
              a real part A and a so-called imaginary part B.
              This complex number is generally written as A + B i, where
              i denotes the <em>imaginary unit</em>, a "magical" number
              that is equal to the square root of -1.
            </p>
            <p>
              This imaginary unit allows us to take the square root of any real number,
              including negative ones. You can work with complex numbers
              as with any other numbers, treating i as some unknown variable.
              For example,
            </p>
            <ul>
              <li>(5 + 3i) &times; 2 = 10 + 6i</li>
              <li>i + i = 2i</li>
              <li>7 + 3 + 5i - 2 = 8+5i</li>
            </ul>
            <p>
              The product of i and i is simply -1, so for example,
              (5 + 3i) &times i = 5i + 3ii = 5i + 3 &times (-1) = 5i - 3.
            </p>
            <p>
              Write the class <code>complex</code> that has the following functionality:
            </p>
            <ul>
              <li>
                <code>complex c;</code> initialises <code>c</code> to 0.
              </li>
              <li>
                <code>complex c(5);</code> initialises <code>c</code> to 5.
              </li>
              <li>
                <code>complex c(7, 2);</code> initialises <code>c</code> to 7 + 2i.
              </li>
              <li>
                A copy constructor should allow us to copy <code>complex</code> objects.
              </li>
              <li>
                <code>c.re()</code> should return the real part. E.g. <code>complex(5, 3).re() == 5</code>.
              </li>
              <li>
                <code>c.im()</code> should return the imaginary part. E.g. <code>complex(5, 3).im() == 3</code>.
              </li>
              <li>
                <code>c.re() = 7;</code> should set the real part to 7.
              </li>
              <li>
                <code>c.im() = 7;</code> should set the imaginary part to 7.
              </li>
              <li>
                <code>c1.add(c2)</code> should return a new complex number equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Addition_and_subtraction">sum</a>.
              </li>
              <li>
                <code>c1.sub(c2)</code> should return a new complex number equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Addition_and_subtraction">difference</a>.
              </li>
              <li>
                <code>c1.neg()</code> should return a new complex number equal to <code>c1</code>'s
                negation. E.g. complex(5, -3).neg() should return a <code>complex(-5, 3)</code>.
              </li>
              <li>
                <code>c1.mul(c2)</code> should return a new complex number equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Multiplication_and_division">product</a>.
              </li>
              <li>
                <code>c1.div(c2)</code> should return a new complex number equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Multiplication_and_division">division</a>
                of <code>c1</code> and <code>c2</code>.
              </li>
              <li>
                <code>c1.reciprocal()</code> should return a new complex number equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Multiplication_and_division">reciprocal</a> of <code>c1</code>.
              </li>
              <li>
                <code>c1.conj()</code> should return a new complex number equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Conjugate">complex conjugate</a> of <code>c1</code>.
              </li>
              <li>
                <code>c1.abs()</code> should return a <code>double</code> equal to the
                <a href="https://en.wikipedia.org/wiki/Complex_number#Absolute_value_and_argument">absolute value</a> of <code>c1</code>.
              </li>
            </ul>
            <p>
              Create both <code>complex.cpp</code> and <code>complex.h</code> files, containing definitions and declarations respectively.
              Tests are available in <code>tests.cpp</code>. Since all code has to compile before you're able to run it,
              you normally wouldn't be able to work incrementally, writing one member
              function at a time, since more advanced tests would invoke
              member functions which you haven't written yet. To remedy this,
              tests have been put between <code>#ifdef</code> and <code>#endif</code> preprocessor directives,
              which allows you to easily exclude tests from the compilation process.
              tests.cpp contains a macro definition <code>#define TEST_LEVEL 9999</code>,
              which controls which tests are included. Set this value to <code>0</code>
              and none of the tests will run. Set it to <code>1</code> and only very basic tests will run, etc.
            </p>
          END
        end
      %>
    </div>
  </body>

  <script>
    Quiz.formatQuizzes();
    SourceEditor.initialize();
    Revealer.initialize();
  </script>
</html>
