<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>PVM Assignment</title>
    <%= default_externals %>
    <script src="<%= Settings::SHARED_URL %>/ace/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/source-editor.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/revealer.js" type="text/javascript" charset="utf-8"></script>

    <%= Html::Generation::Quiz.setup %>
    <style>
      #colours {
        margin-left: auto;
        margin-right: auto;
        width: 50%;
      }
      
      #colours td:first-child {
        color: #FFF;
        text-align: center;
      }

      #colours td {
        padding: 5px;
      }

      input {
        width: 100px;
      }

      input.correct {
        background: #AFA;
      }

      input.incorrect {
        background: #FAA
      }

      .solution {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
      }

      .revealer {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin: 10px auto;      
        text-align: center;
        cursor: help;
      }

      .hint {
        border: 1px solid black;
        padding: 10px;
        width: 75%;
        margin: 10px auto;
      }
    </style>
  </head>

  <body>
    <header>
      <div class="center-vertically">Preprocessor</div>
    </header>
    <div id="contents">

      <%= interpretation <<-END
            #include <iostream>
            #include <string>
            
            #define FOO
  
            int main()
            {
              #ifndef FOO
              int x = 10;
              #else
              std::string x = "qux";
              #endif
              
              std::cout << x << std::endl;

              return 0;
            }
          END
      %>

      <%= interpretation <<-END
            #include <iostream>
            
            #define INIT 100
  
            int main()
            {
              std::cout << INIT << std::endl;
            }
          END
      %>

      <%= interpretation(<<-END, input:'80 100')
            #include <iostream>

            #define unless(x)              if (!(x))
            #define down_to(i, from, to)   for ( int i = from; i >= to; --i )

            int foo(int, int);

            int main()
            {
              int a, b;
              std::cin >> a >> b;

              std::cout << foo(a, b) << std::endl;
            }

            int foo(int a, int b)
            {
                down_to(i, a, 1)
                {
                    unless (a % i || b % i) return i;
                }
            }
          END
      %>

      <%= interpretation(<<-END, input:'80 100')
            #include <iostream>

            #define unless(x)              if (!x)
            #define down_to(i, from, to)   for ( int i = from; i >= to; --i )

            int foo(int, int);

            int main()
            {
              int a, b;
              std::cin >> a >> b;

              std::cout << foo(a, b) << std::endl;
            }

            int foo(int a, int b)
            {
              down_to(i, a, 1)
              {
                unless (a % i || b % i) return i;
              }
            }
          END
      %>

      <div data-revealer="Show hint" class="hint">
        <p>
          First, look for the difference with the previous exercise.
        </p>
        <div data-revealer="Show further hint" class="hint">
          <p>
            The definition for <code>unless</code> differs.
            Edit the code above to simulate what
            happens during preprocessing.
          </p>
        </div>
      </div>
                                        
      <%= interpretation(<<-END)
            #ifndef FOO
            #define FOO

            #include __FILE__

            #include <iostream>

            #ifndef N
            #define N 1000
            #endif

            int main()
            {
                std::cout << N << std::endl;
                std::cin.get();
            }

            #else

            #define N 5

            #endif      
          END
      %>

      <div data-revealer="Show hint" class="hint">
        <p>
          Ask yourself what <code>#include __FILE__</code> does.
          Use the ability to modify code in the code editor above to simulate what happens
          during preprocessing.
        </p>
      </div>
                                  
      <%= format_exercise do
            source = <<-END
              #include <iostream>

              // Belongs in main.cpp
              int main()
              {
                  std::cout << "Enter a value: ";
                  unsigned n = next_unsigned();

                  if (is_prime(n))
                  {
                      std::cout << n << " is prime" << std::endl;
                  }
                  else
                  {
                      std::cout << n << " is not prime" << std::endl;
                  }
              }

              // Belongs in ioutil.cpp
              unsigned next_unsigned()
              {
                  unsigned x;
                  std::cin >> x;
                  return x;
              }

              // Belongs in primes.cpp
              bool is_prime(unsigned n)
              {
                  if (n < 2)
                  {
                      return false;
                  }
                  else
                  {
                      unsigned k = 2;

                      while (sqr(k) <= n)
                      {
                          if (is_divisible_by(n, k))
                          {
                              return false;
                          }

                          ++k;
                      }

                      return true;
                  }
              }

              // Belongs in arithmetic.cpp
              bool is_divisible_by(unsigned a, unsigned b)
              {
                  return b != 0 ? a % b == 0 : false;
              }

              // Belongs in arithmetic.cpp
              unsigned sqr(unsigned x)
              {
                  return x * x;
              }
            END

            <<-END
              <p>
                Split the source code below in several smaller files. Make use of header
                files and include guards.
              </p>
              
              #{source_editor source}
             
              #{solution_link 'split-solution.txt'}
            END
          end
      %>

    </div>
  </body>

  <script>
    Quiz.formatQuizzes();
    SourceEditor.initialize();
    Revealer.initialize();
  </script>
</html>
