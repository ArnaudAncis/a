<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>PVM Assignment</title>
    <%= default_externals %>
    <script src="<%= Settings::SHARED_URL %>/ace/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/source-editor.js" type="text/javascript" charset="utf-8"></script>

    <%= Html::Generation::Quiz.setup %>
    <style>
      #colours {
        margin-left: auto;
        margin-right: auto;
        width: 50%;
      }

      #colours td:first-child {
        color: #FFF;
        text-align: center;
      }

      #colours td {
        padding: 5px;
      }

      input {
        width: 100px;
      }

      input.correct {
        background: #AFA;
      }

      input.incorrect {
        background: #FAA
      }

      .solution {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
      }
    </style>
  </head>

  <body>
    <header>
      <div class="center-vertically">Declarations</div>
    </header>
    <div id="contents">
      <p>
        Reminder: you might need the reference to find out what code does.
      </p>

      <%=
         exercise(Lib::Interpretation) do
           self.source = <<-END
             #include <iostream>

             int main()
             {
               std::cout << "Hello world" << std::endl;

               return 0;
             }
           END

           <<-END
             <p>What is the output of the following code?</p>
             #{show_source_editor}
             #{if input then show_input else '' end}
             #{show_output_field}
           END
         end                                  
      %>

      <%=
         quick_interpretation_exercise(<<-END)
           #include <iostream>

           int main()
           {
             std::cout << "Hello world" << std::endl;

             return 0;
           }
         END
      %>

      <%= quick_interpretation_exercise(<<-END, input: '5')
            #include <iostream>

            int main()
            {
              int x;
              std::cin >> x;

              std::cout << 2 * x << std::endl;

              return 0;
            }
          END
      %>

      <%= quick_interpretation_exercise(<<-END, input: '8')
            #include <iostream>

            int main()
            {
              int x;
              std::cin >> x;

              std::cout << (x ^ 2) << std::endl;

              return 0;
            }
          END
      %>

      <%= quick_interpretation_exercise(<<-END, input: 'abcde')
            #include <iostream>
            #include <string>

            int main()
            {
              std::string string;

              std::cin >> string;

              std::cout << "The string counts "
                        << string.length()
                        << " characters"
                        << std::endl;

              return 0;
            }
          END
      %>

      <%= quick_interpretation_exercise(<<-END, input: '5 1 2 3 4 5')
            #include <iostream>

            int main()
            {
              int n;
              std::cin >> n;

              int total = 0;
              for ( int i = 0; i != n; ++i )
              {
                int x;
                std::cin >> x;
                total += x;
              }

              std::cout << total << std::endl;

              return 0;
            }
          END
      %>

      <%= quick_interpretation_exercise(<<-END, input: '10 6 4 1 8 7 -2 3 8 4 0')
            #include <iostream>
            #include <limits>

            int next_int();
            int pick(int, int);

            int main()
            {
              int result = std::numeric_limits<int>::max();
              int n = next_int();

              for ( int i = 0; i != n; ++i )
              {
                result = pick(result, next_int());
              }

              std::cout << result << std::endl;

              return 0;
            }

            int next_int()
            {
              int x;
              std::cin >> x;

              return x;
            }

            int pick(int x, int y)
            {
              return x < y ? x : y;
            }
          END
      %>

      <%= format_exercise do
            source = <<-END
              #include <iostream>

              int main()
              {
                  std::cout << "Enter a value: ";
                  unsigned n = next_unsigned();

                  if (is_prime(n))
                  {
                      std::cout << n << " is prime" << std::endl;
                  }
                  else
                  {
                      std::cout << n << " is not prime" << std::endl;
                  }
              }

              unsigned next_unsigned()
              {
                  unsigned x;
                  std::cin >> x;
                  return x;
              }

              bool is_prime(unsigned n)
              {
                  if (n < 2)
                  {
                      return false;
                  }
                  else
                  {
                      unsigned k = 2;

                      while (sqr(k) <= n)
                      {
                          if (is_divisible_by(n, k))
                          {
                              return false;
                          }

                          ++k;
                      }

                      return true;
                  }
              }

              bool is_divisible_by(unsigned a, unsigned b)
              {
                  return b != 0 ? a % b == 0 : false;
              }

              unsigned sqr(unsigned x)
              {
                  return x * x;
              }
            END

            <<-END
              <p>Add the necessary declarations so as to make this code compile.</p>
              #{source_editor source}
            END
          end
      %>

      <%= format_exercise do
            <<-END
              <p>
                Write a program that produces the numbers 1 to 100, one per line.
              </p>

              #{solution_link 'count100.cpp'}
            END
          end
      %>

      <%= format_exercise do
            <<-END
              <p>
                Write a program that asks for an integer N and outputs
                the Nth prime.
              </p>

              #{solution_link 'prime.cpp'}
            END
          end
      %>

      <%= format_exercise do
            produce_output('grade-average')
            <<-END
              <p>
                Write a program that computes the average grade for courses. The input is structured
                as follows:
              </p>
              <ul>
                <li>An integer describing the number of courses.</li>
                <li>For each course:
                    <ul>
                      <li>The name of the course</li>
                      <li>The number of grades N as an integer</li>
                      <li>N grades as doubles</li>
                    </ul>
                </li>
              </ul>
              <p>
                The output should be structured as follows:
              </p>
              <ul>
                <li>One line per course. Each line contains
                    <ul>
                      <li>The name of the course</li>
                      <li>A single space</li>
                      <li>The average rounded to two decimals.</li>
                    </ul>
                </li>
              </ul>
              <p>
                These <a href="grade-average-input.txt">inputs</a> should
                produce these <a href="grade-average-output.txt">outputs</a>.
              </p>

              <p>
                Do not put everything in a single function.
              </p>

              #{solution_link 'grade-average.cpp'}
            END
          end
      %>
    </div>
  </body>

  <script>
    Quiz.formatQuizzes();
    SourceEditor.initialize();
  </script>
</html>
