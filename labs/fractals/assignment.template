<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>PVM Assignment</title>
    <%= default_externals %>
    <script src="<%= Settings::SHARED_URL %>/ace/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/source-editor.js" type="text/javascript" charset="utf-8"></script>
    <script src="<%= Settings::SHARED_URL %>/revealer.js" type="text/javascript" charset="utf-8"></script>
    
    <%= Html::Generation::Quiz.setup %>
    <style>
      #colours {
        margin-left: auto;
        margin-right: auto;
        width: 50%;
      }

      #colours td:first-child {
        color: #FFF;
        text-align: center;
      }

      #colours td {
        padding: 5px;
      }

      input {
        width: 100px;
      }

      input.correct {
        background: #AFA;
      }

      input.incorrect {
        background: #FAA
      }

      .solution {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
      }

      .message {
        font-size: 2em;
        font-weight: bold;
        text-align: center;
        width: 75%;
        margin: 100px auto;
        padding: 20px;
        background: #F44;
        box-shadow: 0px 0px 50px 30px #F44;
      }

      .git {
        border: 1px solid black;
        padding: 10px;
        width: 80%;
        margin: 10px auto;
        text-align: center;
        font-weight: bold;
      }

      .cake {
        border: 1px solid black;
        padding: 10px;
        width: 80%;
        margin: 10px auto;
        font-weight: bold;
        background: #FFAA77;
      }

      .cake .header {
        display: block;
        text-align: center;
        font-size: 2em;
        font-weight: bold;
      }

      .revealer {
        border: 1px solid black;
        padding: 10px;
        width: 25%;
        margin: 10px auto;      
        text-align: center;
        cursor: help;
      }

      .explanation {
        border: 1px solid black;
        padding: 10px;
        width: 75%;
        margin: 10px auto;
      }

      img.center {
        display: block;
        margin: 10px auto;
      }
    </style>
  </head>

  <body>
    <header>
      <div class="center-vertically">Fractals</div>
    </header>
    <div id="contents">
      <div class="message" title="You better be reading this!">
        New material, yada yada yada.
      </div>

      <p>
        All exercises are to be made within the same solution, which
        can be found here:
      </p>
      <%=
         module GitLink
           extend Contracts::TypeChecking
           extend GitMixin
         end

         GitLink.git_link 'fractals/fractals.sln'
       %>
       <p>
         The goal of this assignment is for you to find out
         how to accomplish these tasks. You are given a number
         of classes which you have to examine and try
         to determine how they work. It is important that you
         experiment and think logically.
       </p>
         
       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap and write it to file.
             </p>
             <img class="center" src="ex1-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap, fill it with red, and write it to file.
             </p>
             <p>
               Note that the <code>color</code> class uses <code>double</code>s for
               colour components which should range between <code>0</code> and <code>1</code>.
               For example, blue is encoded as <code>color(0, 0, 1)</code>.
             </p>
             <img class="center" src="ex2-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           extend SourceCodeMixin

           self.source = <<-END
             interval from(0, bitmap.width() - 1);
             interval to(0, 255);
             interval_mapper mapper(from, to);

             double mapped_left  = mapper[0]; // 0
             double mapped_right = mapper[bitmap.width() - 1]; // 255
             double mapped_middle = mapper[(bitmap.width() - 1) / 2]; // 127.5
           END
          
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <p>
               Make use of the provided classes <code>interval</code>
               and <code>interval_mapper</code>. Say you have
               an <code>x</code> that varies from left to right in your bitmap,
               in other words, it ranges from <code>0</code> to <code>bitmap.width() - 1</code>.
               Say you want to associate the left side (<code>x = 0</code>) with black (RGB(0,0,0))
               and the right side (<code>x = bitmap.width() - 1</code>) with
               white (RGB(255,255,255)). This means you need to somehow
               map the interval <code>[0, bitmap.width()-1]</code> to
               <code>[0, 255]</code>. You can do this using the <code>interval_mapper</code>
               as follows:
             </p>
             #{show_source_editor}
             
             <img class="center" src="ex3-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex4-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex5-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex6-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex7-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           <<-END
             <p>
               Find a way to create a 500&times;500 bitmap
               with a gradient fill as shown below.
             </p>
             <img class="center" src="ex8-solution.png" />
           END
         end
       %>

       <%=
         exercise do
           extend SourceCodeMixin

           self.source = <<-END
             Bitmap bitmap(500, 500);

             projection proj(500,               // image width
                             500,               // image height
                             interval(0, 1),    // range for real part
                             interval(0, 1));   // range for imaginary part

             proj.project( position(0,0) );     // 0+0i
             proj.project( position(500,500) ); // 1+1i
             proj.project( position(250,0) );   // 0.5+0i
             proj.project( position(0,250) );   // 0+0.5i
             proj.project( position(250,250) ); // 0.5+0.5i             
           END

           <<-END
             <p>
               The <code>projection</code> class can be used
               to associate a complex number with each point of the bitmap.
               For example, you could associate 0+0i with the pixel with coordinates (0,0)
               and 1+1i with the pixel at <code>(bitmap.width()-1, bitmap.height()-1)</code>
               as follows:
             </p>
             #{show_source_editor}
             <p>
               Use <code>projection</code> to produce the image below.
               The bitmap's upper left corner corresponds to -0.5-0.5i,
               the opposite corner corresponds to 0.5+0.5i.
               In other words, the bitmap is mapped to
               a square with side 1 centered on 0+0i.
             </p>
             <p>
               For each pixel with coordinates (x, y), find the corresponding complex c = a+bi.
               The colour for the pixel is then <code>color( c.abs(), c.abs(), c.abs() )</code>.
             </p>   
             <img class="center" src="ex9-solution.png" />
           END
         end
       %>

    </div>
  </body>

  <script>
    Quiz.formatQuizzes();
    SourceEditor.initialize();
    Revealer.initialize();
  </script>
</html>
